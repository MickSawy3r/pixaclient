plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "de.mannodermaus.android-junit5"
    id 'com.google.secrets_gradle_plugin' version '0.6'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "de.sixbits.pixaclient"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        test {
            assets.srcDirs = ['src/test/assets']
        }
    }
}

dependencies {
    def retrofit_version = '2.9.0'
    def okHttp_version = "4.9.1"
    def rx_java_version = "2.2.21"
    def rx_android_version = "2.1.1"
    def glide_version = "4.12.0"
    def dagger_version = "2.33"
    def junit5_version = "5.7.1"
    def junit4_version = "4.13.2"
    def mockito_version = "3.8.0"
    def cucumber_version = "6.10.2"
    def material_version = "1.3.0"
    def constraint_layout_version = "2.0.4"
    def app_compat_version = "1.2.0"
    def retrofit_rx_adapter_version = "2.9.0"
    def ktx_version = "1.3.2"
    def coroutines_test_version = "1.4.3"
    def coroutines_version = "1.4.1"
    def truth_version = "1.1.2"

    // region Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttp_version"
    // endregion

    // region Kotlin libs
    // implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
    // endregion

    // region Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    // endregion

    // region Rx
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_rx_adapter_version"
    // endregion

    // region Material Design libs
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "com.google.android.material:material:$material_version"
    // endregion

    // region Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"
    // endregion

    // region mock services
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttp_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    // endregion

    // region Truths
    testImplementation "com.google.truth:truth:$truth_version"
    // endregion

    // region Junit libs, I shall be using JUnit 5
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"

    // (Optional) If you also have JUnit 4-based tests
    testImplementation("junit:junit:$junit4_version")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junit5_version")
    // endregion

    // region JVM Integration testing with BDD and Cucmber
    testImplementation "io.cucumber:cucumber-java8:$cucumber_version"
    testImplementation "io.cucumber:cucumber-junit:$cucumber_version"
    // endregion
}